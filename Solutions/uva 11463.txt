#include <bits/stdc++.h>
using namespace std;

#define infinity 2147483647

vector<int> graph[110];

int visited[110];
int dist[110];
int distBfs1[110];
int distBfs2[110];
int distBfs3[110];
int n,e;

void bfs(int s){
	queue<int> q;
	for(int i=0; i<n; i++){
		dist[i]=infinity;
		visited[i]=0;
	}
	visited[s]=1;
	dist[s]=0;
	q.push(s);
	while(!q.empty()){
		int u=q.front(); q.pop();
		for(int j=0; j<graph[u].size(); j++){
			int v=graph[u][j];
			if(visited[v]==0){
				visited[v]=1;
				dist[v]=dist[u]+1;
				q.push(v);
			}
		}
	}
}

int main() {
	int t, x, y, a, b, tcase=1;
	
	scanf("%d", &t);
	while(t--){
		scanf("%d %d", &n, &e);
		for(int i=0; i<e ; i++){
			scanf("%d %d", &x, &y);
			graph[x].push_back(y);
			graph[y].push_back(x);
		}
		scanf("%d %d",&a, &b);
		bfs(a);
		for(int i=0; i<n; i++){
			
			distBfs1[i]=dist[i];
		}
		bfs(b);
		for(int i=0; i<n; i++){
			distBfs2[i]=dist[i];
		}
		for(int i=0; i<n; i++){
			distBfs3[i] = distBfs1[i] + distBfs2[i];
		}
		sort(distBfs3, distBfs3+n);
		printf("Case %d: %d\n", tcase++, distBfs3[n-1]);
		
		for(int i=0; i<n; i++)
        {
            graph[i].clear();
        }
	}
	return 0;
}