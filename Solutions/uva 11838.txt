#include <bits/stdc++.h>

using namespace std;

typedef vector<int> vi;

vi graph[2005];
vi trans[2005];
vi color;
vector<int> s;
void dfs(int u, int pass){
    vi neigh;
    color[u]=1;
    if(pass ==1){
        neigh=graph[u];
    }
    else{
        neigh=trans[u];
    }
    for(int j=0; j<neigh.size(); j++){
        if(color[neigh[j]]==0){
            dfs(neigh[j],pass);
        }
    }
    if(pass==1){
        s.push_back(u);
    }
}

int main(){
    int v,e,v1,v2,d;
    while(true){
        scanf("%d %d", &v, &e);
        if(v==0 && e==0)break;
        color.assign(v+1,0);
        for(int i=1; i<=e; i++){
            scanf("%d %d %d", &v1, &v2, &d);
            if(d==1){
                graph[v1].push_back(v2);
                trans[v2].push_back(v1);
            }
            else{
                graph[v2].push_back(v1);
                graph[v1].push_back(v2);
                trans[v2].push_back(v1);
                trans[v1].push_back(v2);
            }
        }
        color.assign(v+1,0);
        for(int i=1; i<=v; i++){
            if(color[i] == 0){
                dfs(i,1);
            }
        }
        int scc=0;
        color.assign(v+1,0);

        reverse(s.begin(), s.end());
        for(int i=1; i<=v; i++){
            if(color[i] == 0){
                scc++;
                dfs(s[i-1],0);
            }
        }
        if(scc==1){
            printf("1\n");
        }
        else{
            printf("0\n");
        }
        s.clear();
        for(int i=0; i<=v; i++){
            graph[i].clear();
            trans[i].clear();
        }
    }

return 0;
}
