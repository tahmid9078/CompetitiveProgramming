#include <bits/stdc++.h>
using namespace std;
#define INF 2147483647

vector<int> graph[305];
int visited[305];
int dist[305];
int parent[305];
vector<int> path;
void initial(){
	memset(visited, 0, sizeof(visited));
	memset(parent, -1, sizeof(parent));
	memset(dist, -1, sizeof(dist));
}
int bfs(int s, int e){
	queue<int> q;
	q.push(s);
	dist[s]=0;
	visited[s]=1;
	while(!q.empty()){
		int u=q.front(); q.pop();
		if(u==e){
			return dist[u];
		}
		for(int i=0; i<graph[u].size(); i++){
			int v=graph[u][i];
			if(visited[v]==0){
				visited[v]=1;
				dist[v]=dist[u]+1;
				parent[v]=u;
				q.push(v);
			}
		}
	}
	return -1;
}

void printpath(int s, int e){
	if(s==e) return;
	else{
		printpath(s,parent[e]);
		path.push_back(parent[e]);
	}
}

int main() {
	char line[1000];
	int n,m,a,b;
	while(scanf("%d", &n)==1){
		getchar();
		for(int i=0; i<n; i++){
			cin.getline(line,sizeof(line));
			char *pch;
			pch=strtok(line,"-,");
			int u=atoi(pch);
			pch=strtok(NULL,"-,");
			while(pch!=NULL){
				int v=atoi(pch);
				graph[u].push_back(v);
				pch=strtok(NULL,"-,");
			}
			
		}
		
		/*for(int i=1; i<=n ; i++){
			printf("%d:", i);
			for(int j=0; j<graph[i].size(); j++){
				printf(" %d",graph[i][j]);
			}
			printf("\n");
		}*/
		scanf("%d", &m);
		printf("-----\n");
		for(int i=0; i<m; i++){
			scanf("%d %d", &a, &b);
			initial();
			int tmp=bfs(a,b);
			if(tmp==-1){
				printf("connection impossible\n");
			}
			else{
				printpath(a,b);
				printf("%d",path[0]);
				for(int j=1; j<path.size(); j++){
					printf(" %d",path[j]);
				}
				printf(" %d\n",b);
				path.clear();
			}
		}
		for(int i=0; i<=n ; i++){
			graph[i].clear();
		}
	}
	return 0;
}