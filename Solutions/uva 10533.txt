#include <bits/stdc++.h>

using namespace std;
#define Size 1000010
typedef long long int ll;
bool mark[Size];
int cumulativeSum[Size];
vector<ll> digPrime;
vector<ll> prime;
int digSum(ll n){
    int sum=0;
    while(n>0){
        sum+=n%10;
        n=n/10;
    }
    return sum;
}

void seive(){
	memset(mark,true,sizeof(mark));
	mark[0]=mark[1]=false;
	for(ll i=4; i<Size; i+=2) mark[i]=false;
	for(ll i=3; i*i<=Size; i+=2){
		if(mark[i]){
			for(ll j=i*i; j<Size; j+=2*i){
				mark[j]=false;
			}
		}
	}
	prime.push_back(2);
	for(ll i=3; i<Size; i+=2){
		if(mark[i]){
			prime.push_back(i);
		}
	}

	//digit prime
	ll totPrime=prime.size();
	ll primeDigSum;
	for(ll i=0; i< totPrime; i++){
        primeDigSum=digSum(prime[i]);
        if(mark[primeDigSum]){
            digPrime.push_back(prime[i]);
        }
	}

	int j=0,cnt=0;
	for(int i=0; i<Size; i++){
        ll tmp=digPrime[j];
        if(tmp<i || tmp>i){
            cumulativeSum[i]=cnt;
        }
        if(tmp==i){
            cnt++;
            cumulativeSum[i]=cnt;
            j++;
        }
	}
	/*for(int i=0; i<Size; i++){
		printf("%d ", cumulativeSum[i]);
	}*/
}


int main(){
    int t,a,b;
    seive();
    scanf("%d", &t);
    while(t--){
        scanf("%d %d", &a, &b);
        printf("%d\n", (cumulativeSum[b]-cumulativeSum[a-1]));
    }

return 0;
}
